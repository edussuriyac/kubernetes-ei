## mysql image version
## ref: https://hub.docker.com/r/library/mysql/tags/
##
image: "mysql"
imageTag: "5.7.14"

## Specify password for root user
##
## Default: random 10 character string
mysqlRootPassword: root

## Create a database user
##
mysqlUser: wso2carbon
## Default: random 10 character string
mysqlPassword: wso2carbon

## Allow unauthenticated access, uncomment to enable
##
# mysqlAllowEmptyPassword: true

## Create a database
##
# mysqlDatabase:

## Specify an imagePullPolicy (Required)
## It's recommended to change this to 'Always' if the image tag is 'latest'
## ref: http://kubernetes.io/docs/user-guide/images/#updating-images
##
imagePullPolicy: IfNotPresent

# Optionally specify an array of imagePullSecrets.
# Secrets must be manually created in the namespace.
# ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
# imagePullSecrets:
  # - name: myRegistryKeySecretName

## Node selector
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

## Persist data to a persistent volume
persistence:
  enabled: true
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 8Gi

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##a
resources:
  requests:
    memory: 256Mi
    cpu: 100m

# Custom mysql configuration files used to override default mysql settings
configurationFiles:
  mysql.cnf: |-
    [mysqld]
    max_connections = 10000
#    skip-name-resolve
#    ssl-ca=/ssl/ca.pem
#    ssl-cert=/ssl/server-cert.pem
#    ssl-key=/ssl/server-key.pem

# Custom mysql init SQL files used to initialize the database
initializationFiles:
  init.sql: "--\n-- Copyright 2017 WSO2 Inc. (http://wso2.org)\n--\n-- Licensed under
    the Apache License, Version 2.0 (the \"License\");\n-- you may not use this file
    except in compliance with the License.\n-- You may obtain a copy of the License
    at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required
    by applicable law or agreed to in writing, software\n-- distributed under the
    License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied.\n-- See the License for the specific language
    governing permissions and\n-- limitations under the License.\n--\n\nDROP DATABASE
    IF EXISTS WSO2EI_USER_DB;\nDROP DATABASE IF EXISTS WSO2EI_INTEGRATOR_CONFIG_GOV_DB;\nDROP
    DATABASE IF EXISTS WSO2_CLUSTER_DB;\nDROP DATABASE IF EXISTS EI_ANALYTICS;\nDROP
    DATABASE IF EXISTS WSO2_CARBON_DB;\nDROP DATABASE IF EXISTS WSO2_PERSISTENCE_DB;\n\nCREATE
    DATABASE WSO2EI_USER_DB;\nCREATE DATABASE WSO2EI_INTEGRATOR_CONFIG_GOV_DB;\nCREATE
    DATABASE WSO2_CLUSTER_DB;\nCREATE DATABASE EI_ANALYTICS;\nCREATE DATABASE WSO2_CARBON_DB;\nCREATE
    DATABASE WSO2_PERSISTENCE_DB;\n\n\nCREATE USER IF NOT EXISTS 'wso2carbon'@'%'
    IDENTIFIED BY 'wso2carbon';\nGRANT ALL ON WSO2EI_USER_DB.* TO 'wso2carbon'@'%'
    IDENTIFIED BY 'wso2carbon';\nGRANT ALL ON WSO2EI_INTEGRATOR_CONFIG_GOV_DB.* TO
    'wso2carbon'@'%' IDENTIFIED BY 'wso2carbon';\nGRANT ALL ON WSO2_CLUSTER_DB.* TO
    'wso2carbon'@'%' IDENTIFIED BY 'wso2carbon';\nGRANT ALL ON EI_ANALYTICS.* TO 'wso2carbon'@'%'
    IDENTIFIED BY 'wso2carbon';\nGRANT ALL ON WSO2_CARBON_DB.* TO 'wso2carbon'@'%'
    IDENTIFIED BY 'wso2carbon';\nGRANT ALL ON WSO2_PERSISTENCE_DB.* TO 'wso2carbon'@'%'
    IDENTIFIED BY 'wso2carbon';\n\nUSE WSO2EI_USER_DB;\n\n-- ################################\n--
    USER MANAGER TABLES\n-- ################################\n\nCREATE TABLE UM_TENANT
    (\n\t\t\tUM_ID INTEGER NOT NULL AUTO_INCREMENT,\n\t        UM_DOMAIN_NAME VARCHAR(255)
    NOT NULL,\n            UM_EMAIL VARCHAR(255),\n            UM_ACTIVE BOOLEAN DEFAULT
    FALSE,\n\t        UM_CREATED_DATE TIMESTAMP NOT NULL,\n\t        UM_USER_CONFIG
    LONGBLOB,\n\t\t\tPRIMARY KEY (UM_ID),\n\t\t\tUNIQUE(UM_DOMAIN_NAME)\n)ENGINE INNODB;\n\nCREATE
    TABLE UM_DOMAIN(\n            UM_DOMAIN_ID INTEGER NOT NULL AUTO_INCREMENT,\n
    \           UM_DOMAIN_NAME VARCHAR(255),\n            UM_TENANT_ID INTEGER DEFAULT
    0,\n            PRIMARY KEY (UM_DOMAIN_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE
    UNIQUE INDEX INDEX_UM_TENANT_UM_DOMAIN_NAME\n                    ON UM_TENANT
    (UM_DOMAIN_NAME);\n\nCREATE TABLE UM_USER (\n             UM_ID INTEGER NOT NULL
    AUTO_INCREMENT,\n             UM_USER_NAME VARCHAR(255) NOT NULL,\n             UM_USER_PASSWORD
    VARCHAR(255) NOT NULL,\n             UM_SALT_VALUE VARCHAR(31),\n             UM_REQUIRE_CHANGE
    BOOLEAN DEFAULT FALSE,\n             UM_CHANGED_TIME TIMESTAMP NOT NULL,\n             UM_TENANT_ID
    INTEGER DEFAULT 0,\n             PRIMARY KEY (UM_ID, UM_TENANT_ID),\n             UNIQUE(UM_USER_NAME,
    UM_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE TABLE UM_SYSTEM_USER (\n             UM_ID
    INTEGER NOT NULL AUTO_INCREMENT,\n             UM_USER_NAME VARCHAR(255) NOT NULL,\n
    \            UM_USER_PASSWORD VARCHAR(255) NOT NULL,\n             UM_SALT_VALUE
    VARCHAR(31),\n             UM_REQUIRE_CHANGE BOOLEAN DEFAULT FALSE,\n             UM_CHANGED_TIME
    TIMESTAMP NOT NULL,\n             UM_TENANT_ID INTEGER DEFAULT 0,\n             PRIMARY
    KEY (UM_ID, UM_TENANT_ID),\n             UNIQUE(UM_USER_NAME, UM_TENANT_ID)\n)ENGINE
    INNODB;\n\nCREATE TABLE UM_ROLE (\n             UM_ID INTEGER NOT NULL AUTO_INCREMENT,\n
    \            UM_ROLE_NAME VARCHAR(255) NOT NULL,\n             UM_TENANT_ID INTEGER
    DEFAULT 0,\n\t\tUM_SHARED_ROLE BOOLEAN DEFAULT FALSE,\n             PRIMARY KEY
    (UM_ID, UM_TENANT_ID),\n             UNIQUE(UM_ROLE_NAME, UM_TENANT_ID)\n)ENGINE
    INNODB;\n\n\nCREATE TABLE UM_MODULE(\n\tUM_ID INTEGER  NOT NULL AUTO_INCREMENT,\n\tUM_MODULE_NAME
    VARCHAR(100),\n\tUNIQUE(UM_MODULE_NAME),\n\tPRIMARY KEY(UM_ID)\n)ENGINE INNODB;\n\nCREATE
    TABLE UM_MODULE_ACTIONS(\n\tUM_ACTION VARCHAR(255) NOT NULL,\n\tUM_MODULE_ID INTEGER
    NOT NULL,\n\tPRIMARY KEY(UM_ACTION, UM_MODULE_ID),\n\tFOREIGN KEY (UM_MODULE_ID)
    REFERENCES UM_MODULE(UM_ID) ON DELETE CASCADE\n)ENGINE INNODB;\n\nCREATE TABLE
    UM_PERMISSION (\n             UM_ID INTEGER NOT NULL AUTO_INCREMENT,\n             UM_RESOURCE_ID
    VARCHAR(255) NOT NULL,\n             UM_ACTION VARCHAR(255) NOT NULL,\n             UM_TENANT_ID
    INTEGER DEFAULT 0,\n\t\tUM_MODULE_ID INTEGER DEFAULT 0,\n\t\t\t       UNIQUE(UM_RESOURCE_ID,UM_ACTION,
    UM_TENANT_ID),\n             PRIMARY KEY (UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE
    INDEX INDEX_UM_PERMISSION_UM_RESOURCE_ID_UM_ACTION ON UM_PERMISSION (UM_RESOURCE_ID,
    UM_ACTION, UM_TENANT_ID);\n\nCREATE TABLE UM_ROLE_PERMISSION (\n             UM_ID
    INTEGER NOT NULL AUTO_INCREMENT,\n             UM_PERMISSION_ID INTEGER NOT NULL,\n
    \            UM_ROLE_NAME VARCHAR(255) NOT NULL,\n             UM_IS_ALLOWED SMALLINT
    NOT NULL,\n             UM_TENANT_ID INTEGER DEFAULT 0,\n\t     UM_DOMAIN_ID INTEGER,\n
    \            UNIQUE (UM_PERMISSION_ID, UM_ROLE_NAME, UM_TENANT_ID, UM_DOMAIN_ID),\n\t
    \    FOREIGN KEY (UM_PERMISSION_ID, UM_TENANT_ID) REFERENCES UM_PERMISSION(UM_ID,
    UM_TENANT_ID) ON DELETE CASCADE,\n\t     FOREIGN KEY (UM_DOMAIN_ID, UM_TENANT_ID)
    REFERENCES UM_DOMAIN(UM_DOMAIN_ID, UM_TENANT_ID) ON DELETE CASCADE,\n             PRIMARY
    KEY (UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\n-- REMOVED UNIQUE (UM_PERMISSION_ID,
    UM_ROLE_ID)\nCREATE TABLE UM_USER_PERMISSION (\n             UM_ID INTEGER NOT
    NULL AUTO_INCREMENT,\n             UM_PERMISSION_ID INTEGER NOT NULL,\n             UM_USER_NAME
    VARCHAR(255) NOT NULL,\n             UM_IS_ALLOWED SMALLINT NOT NULL,\n             UM_TENANT_ID
    INTEGER DEFAULT 0,\n             FOREIGN KEY (UM_PERMISSION_ID, UM_TENANT_ID)
    REFERENCES UM_PERMISSION(UM_ID, UM_TENANT_ID) ON DELETE CASCADE,\n             PRIMARY
    KEY (UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\n-- REMOVED UNIQUE (UM_PERMISSION_ID,
    UM_USER_ID)\nCREATE TABLE UM_USER_ROLE (\n             UM_ID INTEGER NOT NULL
    AUTO_INCREMENT,\n             UM_ROLE_ID INTEGER NOT NULL,\n             UM_USER_ID
    INTEGER NOT NULL,\n             UM_TENANT_ID INTEGER DEFAULT 0,\n             UNIQUE
    (UM_USER_ID, UM_ROLE_ID, UM_TENANT_ID),\n             FOREIGN KEY (UM_ROLE_ID,
    UM_TENANT_ID) REFERENCES UM_ROLE(UM_ID, UM_TENANT_ID),\n             FOREIGN KEY
    (UM_USER_ID, UM_TENANT_ID) REFERENCES UM_USER(UM_ID, UM_TENANT_ID),\n             PRIMARY
    KEY (UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE TABLE UM_SHARED_USER_ROLE(\n
    \   UM_ROLE_ID INTEGER NOT NULL,\n    UM_USER_ID INTEGER NOT NULL,\n    UM_USER_TENANT_ID
    INTEGER NOT NULL,\n    UM_ROLE_TENANT_ID INTEGER NOT NULL,\n    UNIQUE(UM_USER_ID,UM_ROLE_ID,UM_USER_TENANT_ID,
    UM_ROLE_TENANT_ID),\n    FOREIGN KEY(UM_ROLE_ID,UM_ROLE_TENANT_ID) REFERENCES
    UM_ROLE(UM_ID,UM_TENANT_ID) ON DELETE CASCADE,\n    FOREIGN KEY(UM_USER_ID,UM_USER_TENANT_ID)
    REFERENCES UM_USER(UM_ID,UM_TENANT_ID) ON DELETE CASCADE\n)ENGINE INNODB;\n\nCREATE
    TABLE UM_ACCOUNT_MAPPING(\n\tUM_ID INTEGER NOT NULL AUTO_INCREMENT,\n\tUM_USER_NAME
    VARCHAR(255) NOT NULL,\n\tUM_TENANT_ID INTEGER NOT NULL,\n\tUM_USER_STORE_DOMAIN
    VARCHAR(100),\n\tUM_ACC_LINK_ID INTEGER NOT NULL,\n\tUNIQUE(UM_USER_NAME, UM_TENANT_ID,
    UM_USER_STORE_DOMAIN, UM_ACC_LINK_ID),\n\tFOREIGN KEY (UM_TENANT_ID) REFERENCES
    UM_TENANT(UM_ID) ON DELETE CASCADE,\n\tPRIMARY KEY (UM_ID)\n)ENGINE INNODB;\n\n\nCREATE
    TABLE UM_USER_ATTRIBUTE (\n            UM_ID INTEGER NOT NULL AUTO_INCREMENT,\n
    \           UM_ATTR_NAME VARCHAR(255) NOT NULL,\n            UM_ATTR_VALUE VARCHAR(1024),\n
    \           UM_PROFILE_ID VARCHAR(255),\n            UM_USER_ID INTEGER,\n            UM_TENANT_ID
    INTEGER DEFAULT 0,\n            FOREIGN KEY (UM_USER_ID, UM_TENANT_ID) REFERENCES
    UM_USER(UM_ID, UM_TENANT_ID),\n            PRIMARY KEY (UM_ID, UM_TENANT_ID)\n)ENGINE
    INNODB;\n\nCREATE INDEX UM_USER_ID_INDEX ON UM_USER_ATTRIBUTE(UM_USER_ID);\n\nCREATE
    TABLE UM_DIALECT(\n            UM_ID INTEGER NOT NULL AUTO_INCREMENT,\n            UM_DIALECT_URI
    VARCHAR(255) NOT NULL,\n            UM_TENANT_ID INTEGER DEFAULT 0,\n            UNIQUE(UM_DIALECT_URI,
    UM_TENANT_ID),\n            PRIMARY KEY (UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE
    TABLE UM_CLAIM(\n            UM_ID INTEGER NOT NULL AUTO_INCREMENT,\n            UM_DIALECT_ID
    INTEGER NOT NULL,\n            UM_CLAIM_URI VARCHAR(255) NOT NULL,\n            UM_DISPLAY_TAG
    VARCHAR(255),\n            UM_DESCRIPTION VARCHAR(255),\n            UM_MAPPED_ATTRIBUTE_DOMAIN
    VARCHAR(255),\n            UM_MAPPED_ATTRIBUTE VARCHAR(255),\n            UM_REG_EX
    VARCHAR(255),\n            UM_SUPPORTED SMALLINT,\n            UM_REQUIRED SMALLINT,\n
    \           UM_DISPLAY_ORDER INTEGER,\n\t    UM_CHECKED_ATTRIBUTE SMALLINT,\n
    \           UM_READ_ONLY SMALLINT,\n            UM_TENANT_ID INTEGER DEFAULT 0,\n
    \           UNIQUE(UM_DIALECT_ID, UM_CLAIM_URI, UM_TENANT_ID,UM_MAPPED_ATTRIBUTE_DOMAIN),\n
    \           FOREIGN KEY(UM_DIALECT_ID, UM_TENANT_ID) REFERENCES UM_DIALECT(UM_ID,
    UM_TENANT_ID),\n            PRIMARY KEY (UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\n\nCREATE
    TABLE UM_PROFILE_CONFIG(\n            UM_ID INTEGER NOT NULL AUTO_INCREMENT,\n
    \           UM_DIALECT_ID INTEGER NOT NULL,\n            UM_PROFILE_NAME VARCHAR(255),\n
    \           UM_TENANT_ID INTEGER DEFAULT 0,\n            FOREIGN KEY(UM_DIALECT_ID,
    UM_TENANT_ID) REFERENCES UM_DIALECT(UM_ID, UM_TENANT_ID),\n            PRIMARY
    KEY (UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE TABLE IF NOT EXISTS UM_CLAIM_BEHAVIOR(\n
    \   UM_ID INTEGER NOT NULL AUTO_INCREMENT,\n    UM_PROFILE_ID INTEGER,\n    UM_CLAIM_ID
    INTEGER,\n    UM_BEHAVIOUR SMALLINT,\n    UM_TENANT_ID INTEGER DEFAULT 0,\n    FOREIGN
    KEY(UM_PROFILE_ID, UM_TENANT_ID) REFERENCES UM_PROFILE_CONFIG(UM_ID,UM_TENANT_ID),\n
    \   FOREIGN KEY(UM_CLAIM_ID, UM_TENANT_ID) REFERENCES UM_CLAIM(UM_ID,UM_TENANT_ID),\n
    \   PRIMARY KEY(UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE TABLE UM_HYBRID_ROLE(\n
    \           UM_ID INTEGER NOT NULL AUTO_INCREMENT,\n            UM_ROLE_NAME VARCHAR(255),\n
    \           UM_TENANT_ID INTEGER DEFAULT 0,\n            PRIMARY KEY (UM_ID, UM_TENANT_ID)\n)ENGINE
    INNODB;\n\nCREATE TABLE UM_HYBRID_USER_ROLE(\n            UM_ID INTEGER NOT NULL
    AUTO_INCREMENT,\n            UM_USER_NAME VARCHAR(255),\n            UM_ROLE_ID
    INTEGER NOT NULL,\n            UM_TENANT_ID INTEGER DEFAULT 0,\n\t    UM_DOMAIN_ID
    INTEGER,\n            UNIQUE (UM_USER_NAME, UM_ROLE_ID, UM_TENANT_ID, UM_DOMAIN_ID),\n
    \           FOREIGN KEY (UM_ROLE_ID, UM_TENANT_ID) REFERENCES UM_HYBRID_ROLE(UM_ID,
    UM_TENANT_ID) ON DELETE CASCADE,\n\t    FOREIGN KEY (UM_DOMAIN_ID, UM_TENANT_ID)
    REFERENCES UM_DOMAIN(UM_DOMAIN_ID, UM_TENANT_ID) ON DELETE CASCADE,\n            PRIMARY
    KEY (UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE TABLE UM_SYSTEM_ROLE(\n            UM_ID
    INTEGER NOT NULL AUTO_INCREMENT,\n            UM_ROLE_NAME VARCHAR(255),\n            UM_TENANT_ID
    INTEGER DEFAULT 0,\n            PRIMARY KEY (UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE
    INDEX SYSTEM_ROLE_IND_BY_RN_TI ON UM_SYSTEM_ROLE(UM_ROLE_NAME, UM_TENANT_ID);\n\nCREATE
    TABLE UM_SYSTEM_USER_ROLE(\n            UM_ID INTEGER NOT NULL AUTO_INCREMENT,\n
    \           UM_USER_NAME VARCHAR(255),\n            UM_ROLE_ID INTEGER NOT NULL,\n
    \           UM_TENANT_ID INTEGER DEFAULT 0,\n            UNIQUE (UM_USER_NAME,
    UM_ROLE_ID, UM_TENANT_ID),\n            FOREIGN KEY (UM_ROLE_ID, UM_TENANT_ID)
    REFERENCES UM_SYSTEM_ROLE(UM_ID, UM_TENANT_ID),\n            PRIMARY KEY (UM_ID,
    UM_TENANT_ID)\n)ENGINE INNODB;\n\n\nCREATE TABLE UM_HYBRID_REMEMBER_ME(\n            UM_ID
    INTEGER NOT NULL AUTO_INCREMENT,\n\t\t\tUM_USER_NAME VARCHAR(255) NOT NULL,\n\t\t\tUM_COOKIE_VALUE
    VARCHAR(1024),\n\t\t\tUM_CREATED_TIME TIMESTAMP,\n            UM_TENANT_ID INTEGER
    DEFAULT 0,\n\t\t\tPRIMARY KEY (UM_ID, UM_TENANT_ID)\n)ENGINE INNODB;\n\n\n\nUSE
    WSO2EI_INTEGRATOR_CONFIG_GOV_DB;\n\nCREATE TABLE IF NOT EXISTS REG_CLUSTER_LOCK
    (\n             REG_LOCK_NAME VARCHAR (20),\n             REG_LOCK_STATUS VARCHAR
    (20),\n             REG_LOCKED_TIME TIMESTAMP,\n             REG_TENANT_ID INTEGER
    DEFAULT 0,\n             PRIMARY KEY (REG_LOCK_NAME)\n)ENGINE INNODB;\n\nCREATE
    TABLE IF NOT EXISTS REG_LOG (\n             REG_LOG_ID INTEGER AUTO_INCREMENT,\n
    \            REG_PATH VARCHAR (750),\n             REG_USER_ID VARCHAR (31) NOT
    NULL,\n             REG_LOGGED_TIME TIMESTAMP NOT NULL,\n             REG_ACTION
    INTEGER NOT NULL,\n             REG_ACTION_DATA VARCHAR (500),\n             REG_TENANT_ID
    INTEGER DEFAULT 0,\n             PRIMARY KEY (REG_LOG_ID, REG_TENANT_ID)\n)ENGINE
    INNODB;\n\nCREATE INDEX REG_LOG_IND_BY_REGLOG USING HASH ON REG_LOG(REG_LOGGED_TIME,
    REG_TENANT_ID);\n\n-- The REG_PATH_VALUE should be less than 767 bytes, and hence
    was fixed at 750.\n-- See CARBON-5917.\n\nCREATE TABLE IF NOT EXISTS REG_PATH(\n
    \            REG_PATH_ID INTEGER NOT NULL AUTO_INCREMENT,\n             REG_PATH_VALUE
    VARCHAR(750) NOT NULL,\n             REG_PATH_PARENT_ID INTEGER,\n             REG_TENANT_ID
    INTEGER DEFAULT 0,\n             CONSTRAINT PK_REG_PATH PRIMARY KEY(REG_PATH_ID,
    REG_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE INDEX REG_PATH_IND_BY_PATH_VALUE USING
    HASH ON REG_PATH(REG_PATH_VALUE, REG_TENANT_ID);\nCREATE INDEX REG_PATH_IND_BY_PATH_PARENT_ID
    USING HASH ON REG_PATH(REG_PATH_PARENT_ID, REG_TENANT_ID);\n\nCREATE TABLE IF
    NOT EXISTS REG_CONTENT (\n             REG_CONTENT_ID INTEGER NOT NULL AUTO_INCREMENT,\n
    \            REG_CONTENT_DATA LONGBLOB,\n             REG_TENANT_ID INTEGER DEFAULT
    0,\n             CONSTRAINT PK_REG_CONTENT PRIMARY KEY(REG_CONTENT_ID, REG_TENANT_ID)\n)ENGINE
    INNODB;\n\nCREATE TABLE IF NOT EXISTS REG_CONTENT_HISTORY (\n             REG_CONTENT_ID
    INTEGER NOT NULL,\n             REG_CONTENT_DATA LONGBLOB,\n             REG_DELETED
    \  SMALLINT,\n             REG_TENANT_ID INTEGER DEFAULT 0,\n             CONSTRAINT
    PK_REG_CONTENT_HISTORY PRIMARY KEY(REG_CONTENT_ID, REG_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE
    TABLE IF NOT EXISTS REG_RESOURCE (\n            REG_PATH_ID         INTEGER NOT
    NULL,\n            REG_NAME            VARCHAR(256),\n            REG_VERSION
    \        INTEGER NOT NULL AUTO_INCREMENT,\n            REG_MEDIA_TYPE      VARCHAR(500),\n
    \           REG_CREATOR         VARCHAR(31) NOT NULL,\n            REG_CREATED_TIME
    \   TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            REG_LAST_UPDATOR
    \   VARCHAR(31),\n            REG_LAST_UPDATED_TIME    TIMESTAMP NOT NULL DEFAULT
    CURRENT_TIMESTAMP,\n            REG_DESCRIPTION     VARCHAR(1000),\n            REG_CONTENT_ID
    \     INTEGER,\n            REG_TENANT_ID INTEGER DEFAULT 0,\n            REG_UUID
    VARCHAR(100) NOT NULL,\n            CONSTRAINT PK_REG_RESOURCE PRIMARY KEY(REG_VERSION,
    REG_TENANT_ID)\n)ENGINE INNODB;\n\nALTER TABLE REG_RESOURCE ADD CONSTRAINT REG_RESOURCE_FK_BY_PATH_ID
    FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID);\nALTER
    TABLE REG_RESOURCE ADD CONSTRAINT REG_RESOURCE_FK_BY_CONTENT_ID FOREIGN KEY (REG_CONTENT_ID,
    REG_TENANT_ID) REFERENCES REG_CONTENT (REG_CONTENT_ID, REG_TENANT_ID);\nCREATE
    INDEX REG_RESOURCE_IND_BY_NAME USING HASH ON REG_RESOURCE(REG_NAME, REG_TENANT_ID);\nCREATE
    INDEX REG_RESOURCE_IND_BY_PATH_ID_NAME USING HASH ON REG_RESOURCE(REG_PATH_ID,
    REG_NAME, REG_TENANT_ID);\nCREATE INDEX REG_RESOURCE_IND_BY_UUID USING HASH ON
    REG_RESOURCE(REG_UUID);\nCREATE INDEX REG_RESOURCE_IND_BY_TENAN USING HASH ON
    REG_RESOURCE(REG_TENANT_ID, REG_UUID);\nCREATE INDEX REG_RESOURCE_IND_BY_TYPE
    USING HASH ON REG_RESOURCE(REG_TENANT_ID, REG_MEDIA_TYPE);\n\nCREATE TABLE IF
    NOT EXISTS REG_RESOURCE_HISTORY (\n            REG_PATH_ID         INTEGER NOT
    NULL,\n            REG_NAME            VARCHAR(256),\n            REG_VERSION
    \        INTEGER NOT NULL,\n            REG_MEDIA_TYPE      VARCHAR(500),\n            REG_CREATOR
    \        VARCHAR(31) NOT NULL,\n            REG_CREATED_TIME    TIMESTAMP NOT
    NULL DEFAULT CURRENT_TIMESTAMP,\n            REG_LAST_UPDATOR    VARCHAR(31),\n
    \           REG_LAST_UPDATED_TIME    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n
    \           REG_DESCRIPTION     VARCHAR(1000),\n            REG_CONTENT_ID      INTEGER,\n
    \           REG_DELETED         SMALLINT,\n            REG_TENANT_ID INTEGER DEFAULT
    0,\n            REG_UUID VARCHAR(100) NOT NULL,\n            CONSTRAINT PK_REG_RESOURCE_HISTORY
    PRIMARY KEY(REG_VERSION, REG_TENANT_ID)\n)ENGINE INNODB;\n\nALTER TABLE REG_RESOURCE_HISTORY
    ADD CONSTRAINT REG_RESOURCE_HIST_FK_BY_PATHID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID)
    REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID);\nALTER TABLE REG_RESOURCE_HISTORY
    ADD CONSTRAINT REG_RESOURCE_HIST_FK_BY_CONTENT_ID FOREIGN KEY (REG_CONTENT_ID,
    REG_TENANT_ID) REFERENCES REG_CONTENT_HISTORY (REG_CONTENT_ID, REG_TENANT_ID);\nCREATE
    INDEX REG_RESOURCE_HISTORY_IND_BY_NAME USING HASH ON REG_RESOURCE_HISTORY(REG_NAME,
    REG_TENANT_ID);\nCREATE INDEX REG_RESOURCE_HISTORY_IND_BY_PATH_ID_NAME USING HASH
    ON REG_RESOURCE(REG_PATH_ID, REG_NAME, REG_TENANT_ID);\n\nCREATE TABLE IF NOT
    EXISTS REG_COMMENT (\n            REG_ID        INTEGER NOT NULL AUTO_INCREMENT,\n
    \           REG_COMMENT_TEXT      VARCHAR(500) NOT NULL,\n            REG_USER_ID
    \          VARCHAR(31) NOT NULL,\n            REG_COMMENTED_TIME    TIMESTAMP
    NOT NULL,\n            REG_TENANT_ID INTEGER DEFAULT 0,\n            CONSTRAINT
    PK_REG_COMMENT PRIMARY KEY(REG_ID, REG_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE TABLE
    IF NOT EXISTS REG_RESOURCE_COMMENT (\n            REG_COMMENT_ID          INTEGER
    NOT NULL,\n            REG_VERSION             INTEGER,\n            REG_PATH_ID
    \            INTEGER,\n            REG_RESOURCE_NAME       VARCHAR(256),\n            REG_TENANT_ID
    INTEGER DEFAULT 0\n)ENGINE INNODB;\n\nALTER TABLE REG_RESOURCE_COMMENT ADD CONSTRAINT
    REG_RESOURCE_COMMENT_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES
    REG_PATH (REG_PATH_ID, REG_TENANT_ID);\nALTER TABLE REG_RESOURCE_COMMENT ADD CONSTRAINT
    REG_RESOURCE_COMMENT_FK_BY_COMMENT_ID FOREIGN KEY (REG_COMMENT_ID, REG_TENANT_ID)
    REFERENCES REG_COMMENT (REG_ID, REG_TENANT_ID);\nCREATE INDEX REG_RESOURCE_COMMENT_IND_BY_PATH_ID_AND_RESOURCE_NAME
    USING HASH ON REG_RESOURCE_COMMENT(REG_PATH_ID, REG_RESOURCE_NAME, REG_TENANT_ID);\nCREATE
    INDEX REG_RESOURCE_COMMENT_IND_BY_VERSION USING HASH ON REG_RESOURCE_COMMENT(REG_VERSION,
    REG_TENANT_ID);\n\nCREATE TABLE IF NOT EXISTS REG_RATING (\n            REG_ID
    \    INTEGER NOT NULL AUTO_INCREMENT,\n            REG_RATING        INTEGER NOT
    NULL,\n            REG_USER_ID       VARCHAR(31) NOT NULL,\n            REG_RATED_TIME
    \   TIMESTAMP NOT NULL,\n            REG_TENANT_ID INTEGER DEFAULT 0,\n            CONSTRAINT
    PK_REG_RATING PRIMARY KEY(REG_ID, REG_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE TABLE
    IF NOT EXISTS REG_RESOURCE_RATING (\n            REG_RATING_ID           INTEGER
    NOT NULL,\n            REG_VERSION             INTEGER,\n            REG_PATH_ID
    \            INTEGER,\n            REG_RESOURCE_NAME       VARCHAR(256),\n            REG_TENANT_ID
    INTEGER DEFAULT 0\n)ENGINE INNODB;\n\nALTER TABLE REG_RESOURCE_RATING ADD CONSTRAINT
    REG_RESOURCE_RATING_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES
    REG_PATH (REG_PATH_ID, REG_TENANT_ID);\nALTER TABLE REG_RESOURCE_RATING ADD CONSTRAINT
    REG_RESOURCE_RATING_FK_BY_RATING_ID FOREIGN KEY (REG_RATING_ID, REG_TENANT_ID)
    REFERENCES REG_RATING (REG_ID, REG_TENANT_ID);\nCREATE INDEX REG_RESOURCE_RATING_IND_BY_PATH_ID_AND_RESOURCE_NAME
    USING HASH ON REG_RESOURCE_RATING(REG_PATH_ID, REG_RESOURCE_NAME, REG_TENANT_ID);\nCREATE
    INDEX REG_RESOURCE_RATING_IND_BY_VERSION USING HASH ON REG_RESOURCE_RATING(REG_VERSION,
    REG_TENANT_ID);\n\n\nCREATE TABLE IF NOT EXISTS REG_TAG (\n            REG_ID
    \        INTEGER NOT NULL AUTO_INCREMENT,\n            REG_TAG_NAME       VARCHAR(500)
    NOT NULL,\n            REG_USER_ID        VARCHAR(31) NOT NULL,\n            REG_TAGGED_TIME
    \   TIMESTAMP NOT NULL,\n            REG_TENANT_ID INTEGER DEFAULT 0,\n            CONSTRAINT
    PK_REG_TAG PRIMARY KEY(REG_ID, REG_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE TABLE
    IF NOT EXISTS REG_RESOURCE_TAG (\n            REG_TAG_ID              INTEGER
    NOT NULL,\n            REG_VERSION             INTEGER,\n            REG_PATH_ID
    \            INTEGER,\n            REG_RESOURCE_NAME       VARCHAR(256),\n            REG_TENANT_ID
    INTEGER DEFAULT 0\n)ENGINE INNODB;\n\nALTER TABLE REG_RESOURCE_TAG ADD CONSTRAINT
    REG_RESOURCE_TAG_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES
    REG_PATH (REG_PATH_ID, REG_TENANT_ID);\nALTER TABLE REG_RESOURCE_TAG ADD CONSTRAINT
    REG_RESOURCE_TAG_FK_BY_TAG_ID FOREIGN KEY (REG_TAG_ID, REG_TENANT_ID) REFERENCES
    REG_TAG (REG_ID, REG_TENANT_ID);\nCREATE INDEX REG_RESOURCE_TAG_IND_BY_PATH_ID_AND_RESOURCE_NAME
    USING HASH ON REG_RESOURCE_TAG(REG_PATH_ID, REG_RESOURCE_NAME, REG_TENANT_ID);\nCREATE
    INDEX REG_RESOURCE_TAG_IND_BY_VERSION USING HASH ON REG_RESOURCE_TAG(REG_VERSION,
    REG_TENANT_ID);\n\nCREATE TABLE IF NOT EXISTS REG_PROPERTY (\n            REG_ID
    \        INTEGER NOT NULL AUTO_INCREMENT,\n            REG_NAME       VARCHAR(100)
    NOT NULL,\n            REG_VALUE        VARCHAR(1000),\n            REG_TENANT_ID
    INTEGER DEFAULT 0,\n            CONSTRAINT PK_REG_PROPERTY PRIMARY KEY(REG_ID,
    REG_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE TABLE IF NOT EXISTS REG_RESOURCE_PROPERTY
    (\n            REG_PROPERTY_ID         INTEGER NOT NULL,\n            REG_VERSION
    \            INTEGER,\n            REG_PATH_ID             INTEGER,\n            REG_RESOURCE_NAME
    \      VARCHAR(256),\n            REG_TENANT_ID INTEGER DEFAULT 0\n)ENGINE INNODB;\n\nALTER
    TABLE REG_RESOURCE_PROPERTY ADD CONSTRAINT REG_RESOURCE_PROPERTY_FK_BY_PATH_ID
    FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES REG_PATH (REG_PATH_ID, REG_TENANT_ID);\nALTER
    TABLE REG_RESOURCE_PROPERTY ADD CONSTRAINT REG_RESOURCE_PROPERTY_FK_BY_TAG_ID
    FOREIGN KEY (REG_PROPERTY_ID, REG_TENANT_ID) REFERENCES REG_PROPERTY (REG_ID,
    REG_TENANT_ID);\nCREATE INDEX REG_RESOURCE_PROPERTY_IND_BY_PATH_ID_AND_RESOURCE_NAME
    USING HASH ON REG_RESOURCE_PROPERTY(REG_PATH_ID, REG_RESOURCE_NAME, REG_TENANT_ID);\nCREATE
    INDEX REG_RESOURCE_PROPERTY_IND_BY_VERSION USING HASH ON REG_RESOURCE_PROPERTY(REG_VERSION,
    REG_TENANT_ID);\n\n-- CREATE TABLE IF NOT EXISTS REG_ASSOCIATIONS (\n-- SRC_PATH_ID
    \    INTEGER,\n-- SRC_RESOURCE_NAME    VARCHAR(256),\n-- SRC_VERSION     INTEGER,\n--
    TGT_PATH_ID     INTEGER,\n-- TGT_RESOURCE_NAME    VARCHAR(256),\n-- TGT_VERSION
    \    INTEGER\n-- )ENGINE INNODB;\n--\n-- ALTER TABLE REG_ASSOCIATIONS ADD CONSTRAINT
    REG_ASSOCIATIONS_FK_BY_SRC_PATH_ID FOREIGN KEY (SRC_PATH_ID) REFERENCES REG_PATH
    (PATH_ID);\n-- ALTER TABLE REG_ASSOCIATIONS ADD CONSTRAINT REG_ASSOCIATIONS_FK_BY_TGT_PATH_ID
    FOREIGN KEY (TGT_PATH_ID) REFERENCES REG_PATH (PATH_ID);\n-- CREATE INDEX REG_ASSOCIATIONS_IND_BY_SRC_VERSION
    ON REG_ASSOCIATIONS(SRC_VERSION);\n-- CREATE INDEX REG_ASSOCIATIONS_IND_BY_TGT_VERSION
    ON REG_ASSOCIATIONS(TGT_VERSION);\n-- CREATE INDEX REG_ASSOCIATIONS_IND_BY_SRC_RESOURCE_NAME
    ON REG_ASSOCIATIONS(SRC_RESOURCE_NAME);\n-- CREATE INDEX REG_ASSOCIATIONS_IND_BY_TGT_RESOURCE_NAME
    ON REG_ASSOCIATIONS(TGT_RESOURCE_NAME);\n\n\n\nCREATE TABLE IF NOT EXISTS REG_ASSOCIATION
    (\n            REG_ASSOCIATION_ID INTEGER AUTO_INCREMENT,\n            REG_SOURCEPATH
    VARCHAR (750) NOT NULL,\n            REG_TARGETPATH VARCHAR (750) NOT NULL,\n
    \           REG_ASSOCIATION_TYPE VARCHAR (2000) NOT NULL,\n            REG_TENANT_ID
    INTEGER DEFAULT 0,\n            PRIMARY KEY (REG_ASSOCIATION_ID, REG_TENANT_ID)\n)ENGINE
    INNODB;\n\nCREATE TABLE IF NOT EXISTS REG_SNAPSHOT (\n            REG_SNAPSHOT_ID
    \    INTEGER NOT NULL AUTO_INCREMENT,\n            REG_PATH_ID            INTEGER
    NOT NULL,\n            REG_RESOURCE_NAME      VARCHAR(255),\n            REG_RESOURCE_VIDS
    \    LONGBLOB NOT NULL,\n            REG_TENANT_ID INTEGER DEFAULT 0,\n            CONSTRAINT
    PK_REG_SNAPSHOT PRIMARY KEY(REG_SNAPSHOT_ID, REG_TENANT_ID)\n)ENGINE INNODB;\n\nCREATE
    INDEX REG_SNAPSHOT_IND_BY_PATH_ID_AND_RESOURCE_NAME USING HASH ON REG_SNAPSHOT(REG_PATH_ID,
    REG_RESOURCE_NAME, REG_TENANT_ID);\n\nALTER TABLE REG_SNAPSHOT ADD CONSTRAINT
    REG_SNAPSHOT_FK_BY_PATH_ID FOREIGN KEY (REG_PATH_ID, REG_TENANT_ID) REFERENCES
    REG_PATH (REG_PATH_ID, REG_TENANT_ID);"
service:
  ## Specify a service type
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types
  type: ClusterIP
  port: 3306
  # nodePort: 32000

ssl:
  enabled: false
  secret: mysql-ssl-certs
  certificates:
#  - name: mysql-ssl-certs
#    ca: |-
#      -----BEGIN CERTIFICATE-----
#      ...
#      -----END CERTIFICATE-----
#    cert: |-
#      -----BEGIN CERTIFICATE-----
#      ...
#      -----END CERTIFICATE-----
#    key: |-
#      -----BEGIN RSA PRIVATE KEY-----
#      ...
#      -----END RSA PRIVATE KEY-----

